<?php

declare(strict_types=1);

namespace KejawenLab\Semart\Skeleton\Controller\Admin;

use KejawenLab\Semart\Skeleton\Entity\{{ entity | humanize }};
use KejawenLab\Semart\Skeleton\Pagination\Paginator;
use KejawenLab\Semart\Skeleton\Repository\{{ entity | humanize }}Repository;
use KejawenLab\Semart\Skeleton\Request\RequestHandler;
use KejawenLab\Semart\Skeleton\Security\Authorization\Permission;
use KejawenLab\Semart\Skeleton\Security\Service\SuperAdministratorCheckerService;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\Serializer\SerializerInterface;

/**
 * @Route("/{{ entity | pluralize | dash }}")
 *
 * @Permission(menu="{{ entity | upper }}")
 *
 * @author Muhamad Surya Iksanudin <surya.iksanudin@gmail.com>
 */
class {{ entity | humanize }}Controller extends AdminController
{
    /**
     * @Route("/", methods={"GET"}, name="{{ entity | pluralize | underscore }}_index", options={"expose"=true})
     *
     * @Permission(actions=Permission::VIEW)
     */
    public function index(Request $request, Paginator $paginator)
    {
        ${{ entity | pluralize | lower }} = $paginator->paginate({{ entity | humanize }}::class, (int) $request->query->get('page', 1));

        if ($request->isXmlHttpRequest()) {
            $table = $this->renderView('{{ entity | underscore | lower }}/table-content.html.twig', ['{{ entity | pluralize | camelcase }}' => ${{ entity | pluralize | lower }}]);
            $pagination = $this->renderView('{{ entity | underscore | lower }}/pagination.html.twig', ['{{ entity | pluralize | camelcase }}' => ${{ entity | pluralize | lower }}]);

            return new JsonResponse([
                'table' => $table,
                'pagination' => $pagination,
            ]);
        }

        return $this->render('{{ entity | underscore| lower  }}/index.html.twig', ['title' => '{{ entity | humanize }}', '{{ entity | pluralize | camelcase }}' => ${{ entity | pluralize | lower }}]);
    }

    /**
     * @Route("/{id}", methods={"GET"}, name="{{ entity | pluralize | underscore }}_detail", options={"expose"=true})
     *
     * @Permission(actions=Permission::VIEW)
     */
    public function find(string $id, {{ entity | humanize }}Repository $repository, SerializerInterface $serializer)
    {
        ${{ entity | lower }} = $repository->find($id);
        if (!${{ entity | lower }}) {
            throw new NotFoundHttpException();
        }

        return new JsonResponse($serializer->serialize(${{ entity | lower }}, 'json', ['groups' => ['read']]));
    }

    /**
     * @Route("/save", methods={"POST"}, name="{{ entity | pluralize | underscore }}_save", options={"expose"=true})
     *
     * @Permission(actions={Permission::ADD, Permission::EDIT})
     */
    public function save(Request $request, {{ entity | humanize }}Repository $repository, RequestHandler $requestHandler)
    {
        $primary = $request->get('id');
        if ($primary) {
            ${{ entity | lower }} = $repository->find($primary);
        } else {
            ${{ entity | lower }} = new {{ entity | humanize }}();
        }

        $requestHandler->handle($request, ${{ entity | lower }});
        if (!$requestHandler->isValid()) {
            return new JsonResponse(['status' => 'KO', 'errors' => $requestHandler->getErrors()]);
        }

        $this->commit(${{ entity | lower }});

        return new JsonResponse(['status' => 'OK']);
    }

    /**
     * @Route("/{id}/delete", methods={"POST"}, name="{{ entity | pluralize | underscore }}_remove", options={"expose"=true})
     *
     * @Permission(actions=Permission::DELETE)
     */
    public function delete(string $id, {{ entity | humanize }}Repository $repository)
    {
        if (!${{ entity | lower }} = $repository->find($id)) {
            throw new NotFoundHttpException();
        }

        $this->remove(${{ entity | lower }});

        return new JsonResponse(['status' => 'OK']);
    }

    /**
     * @Route("/{id}/restore", methods={"POST"}, name="{{ entity | pluralize | underscore }}_restore", options={"expose"=true})
     *
     * @Permission(actions=Permission::DELETE)
     */
    public function restore(string $id, {{ entity | humanize }}Repository $repository, SuperAdministratorCheckerService $service)
    {
        if (!$city = $repository->find($id) && $service->isAdmin()) {
            throw new NotFoundHttpException();
        }

        $repository->restore($id);

        return new JsonResponse(['status' => 'OK']);
    }
}
